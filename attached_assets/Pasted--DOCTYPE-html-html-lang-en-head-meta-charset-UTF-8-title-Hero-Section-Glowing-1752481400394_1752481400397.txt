<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Hero Section - Glowing Bands</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    html, body {
      margin: 0; padding: 0; height: 100%; width: 100%; overflow: hidden;
    }
    body {
      min-height: 100vh;
      font-family: 'Inter', sans-serif;
      color: #fff;
      background: #111;
    }
    #container {
      position: absolute;
      width: 100vw;
      height: 100vh;
      top: 0; left: 0;
      z-index: 1;
    }
    .hero-ui {
      position: absolute;
      top: 0; left: 0; width: 100vw; height: 100vh;
      z-index: 2;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      pointer-events: none;
    }
    .hero-ui .inner {
      pointer-events: auto;
      text-align: center;
    }
    .hero-ui h1 {
      font-size: 4rem;
      font-weight: 900;
      letter-spacing: 2px;
      margin-bottom: 1.5rem;
      color: #fff;
      text-shadow: 0 2px 20px #000a;
    }
    .hero-ui h2 {
      font-size: 1.5rem;
      font-weight: 500;
      margin-bottom: 2.2rem;
      color: #fff;
    }
    .hero-ui .info {
      display: flex;
      justify-content: center;
      gap: 2rem;
      font-size: 1.08rem;
      margin-bottom: 2.5rem;
    }
    .hero-ui .info .block {
      background: #111d;
      padding: 0.8rem 2.5rem;
      border-radius: 1.3rem;
      box-shadow: 0 1px 12px #0007;
      font-weight: 700;
      letter-spacing: 2px;
    }
    .hero-ui .buttons {
      margin-top: 2.5rem;
      display: flex;
      flex-direction: column;
      gap: 1.1rem;
      justify-content: center;
      align-items: center;
    }
    .hero-ui .launch-btn {
      background: linear-gradient(90deg, #00f0ff 0%, #00eaff 100%);
      color: #333;
      border: none;
      border-radius: 2.7rem;
      padding: 1.1rem 4rem;
      font-size: 1.4rem;
      font-weight: 800;
      box-shadow: 0 2px 36px #0008;
      cursor: pointer;
      transition: background .2s;
      outline: none;
    }
    .hero-ui .ambient-btn {
      background: linear-gradient(90deg, #aa6fff 0%, #ffb06f 100%);
      color: #222;
      border: none;
      border-radius: 2.2rem;
      padding: 0.9rem 3rem;
      font-size: 1.1rem;
      font-weight: 700;
      box-shadow: 0 2px 24px #0006;
      cursor: pointer;
      transition: background .2s;
      outline: none;
    }
    .hero-ui .footer {
      margin-top: 3.5rem;
      font-size: 1rem;
      color: #ffe680;
      letter-spacing: 2px;
    }
    .hero-ui .desc {
      color: #fff;
      margin-top: 0.7rem;
      font-size: 1.05rem;
      opacity: 0.82;
      letter-spacing: 1px;
    }
    @media (max-width: 800px) {
      .hero-ui h1 { font-size: 2.2rem; }
      .hero-ui h2 { font-size: 1.1rem; }
      .hero-ui .info .block { padding: 0.6rem 1.2rem; font-size: 0.98rem;}
      .hero-ui .launch-btn { font-size: 1rem; padding: 0.7rem 1.7rem; }
      .hero-ui .ambient-btn { font-size: 0.9rem; padding: 0.5rem 1.2rem; }
    }
  </style>
</head>
<body>
  <div id="container"></div>
  <div class="hero-ui">
    <div class="inner">
      <div style="margin-bottom: 1.8rem; color: #2ee0e0; font-size: 1.25rem; font-weight: 700; letter-spacing: 2px;">WELCOME BACK, INTERNATIONAL CITIZEN</div>
      <h1>BHANU</h1>
      <h2>When you learn to see the invisible, you create the impossible</h2>
      <div class="info">
        <div class="block" style="color:#2ee0e0;">01:42 PM<br><span style="font-size:0.9em;color:#fff;">LOCAL TIME</span></div>
        <div class="block" style="color:#7cff86;">LIVE<br><span style="font-size:0.9em;color:#fff;">STATUS</span></div>
        <div class="block" style="color:#ffe680;">72%<br><span style="font-size:0.9em;color:#fff;">ENERGY</span></div>
      </div>
      <div class="buttons">
        <button class="launch-btn">ðŸš€ LAUNCH YOUR SPACE</button>
        <button class="ambient-btn">ðŸŒˆ AMBIENT MODE</button>
      </div>
      <div class="footer">âœ¨ MOVE MOUSE &nbsp; Â· &nbsp; EXPLORE YOUR REALM</div>
      <div class="desc">This is your personal digital sanctuary</div>
    </div>
  </div>
  <script type="module">
    import * as THREE from "https://esm.sh/three@0.175.0";

    // ---- Shader code for horizontal glowing bands ----
    const vertexShader = `
      varying vec2 vUv;
      void main() {
        vUv = uv;
        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
      }
    `;

    const fragmentShader = `
      precision highp float;
      varying vec2 vUv;

      uniform float iTime;
      uniform vec2 iResolution;
      uniform vec2 iMouse;

      // Color palette
      vec3 orange = vec3(1.0, 0.72, 0.1);
      vec3 yellow = vec3(1.0, 0.88, 0.45);
      vec3 glow = vec3(0.9, 0.5, 0.02);

      // Soft horizontal glowing bands
      float band(vec2 uv, float y, float thickness, float glowStrength, float speed, float offset) {
        float wavyY = y + 0.07 * sin(uv.x * 6.0 + offset + iTime * speed);
        float dist = abs(uv.y - wavyY);
        float base = exp(-dist * thickness * 12.0) * glowStrength;
        // A little extra falloff for smooth
        base *= exp(-dist * thickness * 5.0);
        return base;
      }

      void main() {
        vec2 uv = vUv;
        vec3 col = vec3(0.09, 0.06, 0.03); // very dark background

        // Band 1 (top)
        float b1 = band(uv, 0.32, 0.21, 1.2, 0.6, 0.0);
        col += b1 * mix(orange, yellow, 0.5);

        // Band 2 (middle, strongest)
        float b2 = band(uv, 0.5 + 0.05*sin(iTime*0.3), 0.24, 1.7, 1.6, 1.5);
        col += b2 * glow;

        // Band 3 (lower)
        float b3 = band(uv, 0.74, 0.17, 1.2, 1.1, 3.5);
        col += b3 * orange;

        // Slight streaks and movement for "energy"
        float streak = 0.035 * sin(uv.x * 35.0 - iTime * 2.2) * exp(-abs(uv.y-0.6)*7.0);
        col += streak * yellow;

        // Subtle mouse parallax
        float mx = (iMouse.x / iResolution.x - 0.5) * 0.09;
        col += band(uv, 0.42+mx, 0.17, 0.5, 0.9, 2.5) * glow;

        // Soft vignette
        float vig = 0.88 - 0.21 * pow((uv.x-0.5)*2.0,2.0) - 0.25 * pow((uv.y-0.5)*2.0,2.0);
        col *= vig;

        gl_FragColor = vec4(col, 1.0);
      }
    `;

    // --- Three.js setup ---
    let renderer, scene, camera, material;
    function resize() {
      renderer.setSize(window.innerWidth, window.innerHeight);
      material.uniforms.iResolution.value.set(window.innerWidth, window.innerHeight);
    }

    function init() {
      const container = document.getElementById("container");
      scene = new THREE.Scene();
      camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);

      material = new THREE.ShaderMaterial({
        vertexShader,
        fragmentShader,
        uniforms: {
          iTime: { value: 0 },
          iResolution: { value: new THREE.Vector2(window.innerWidth, window.innerHeight) },
          iMouse: { value: new THREE.Vector2(window.innerWidth/2, window.innerHeight/2) }
        }
      });

      const plane = new THREE.PlaneGeometry(2,2);
      const mesh = new THREE.Mesh(plane, material);
      scene.add(mesh);

      renderer = new THREE.WebGLRenderer({ antialias: true });
      renderer.setSize(window.innerWidth, window.innerHeight);
      renderer.setClearColor(0x111111, 1);
      container.appendChild(renderer.domElement);

      window.addEventListener('resize', resize);
      window.addEventListener('mousemove', e => {
        material.uniforms.iMouse.value.set(e.clientX, e.clientY);
      });

      animate();
    }

    function animate(t) {
      material.uniforms.iTime.value = t * 0.001;
      renderer.render(scene, camera);
      requestAnimationFrame(animate);
    }

    window.onload = init;
  </script>
</body>
</html>